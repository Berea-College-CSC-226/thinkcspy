<section xml:id="selection_exercises">
        <title>Exercises</title>
        <QuestionNode xml:id="selection-ex-1" line="13" names="selection_ex_1" runestone_options="{'number': 1, 'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_1', 'qnumber': '', 'question_label': '7.10.1'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
            <TabbedStuffNode divid="q1" line="16" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q1', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ex_6_1">
    <caption/>
    <program xml:id="ex_6_1_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
                    <p>What do these expressions evaluate to?</p>
                    <p><ol label="1">
                        <li>
                            <p><c>3 == 3</c></p>
                        </li>
                        <li>
                            <p><c>3 != 3</c></p>
                        </li>
                        <li>
                            <p><c>3 &gt;= 4</c></p>
                        </li>
                        <li>
                            <p><c>not (3 &lt; 4)</c></p>
                        </li>
                    </ol></p>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">
                    <p><ol label="1">
                        <li>
                            <p>True</p>
                        </li>
                        <li>
                            <p>False</p>
                        </li>
                        <li>
                            <p>False</p>
                        </li>
                        <li>
                            <p>False</p>
                        </li>
                    </ol></p>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="39" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_eb4a097382404ffe81300aac5744e3fe', 'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-2" line="44" names="selection_ex_2" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_2', 'qnumber': '', 'question_label': '7.10.3'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">

<listing xml:id="ex_6_2">
    <caption/>
    <program xml:id="ex_6_2_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
            <p>Give the <strong>logical opposites</strong> of these conditions.  You are not allowed to use the <c>not</c> operator.</p>
            <p><ol label="1">
                <li>
                    <p><c>a &gt; b</c></p>
                </li>
                <li>
                    <p><c>a &gt;= b</c></p>
                </li>
                <li>
                    <p><c>a &gt;= 18  and  day == 3</c></p>
                </li>
                <li>
                    <p><c>a &gt;= 18  or  day != 3</c></p>
                </li>
            </ol></p>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-3" line="56" names="selection_ex_3" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_3', 'qnumber': '', 'question_label': '7.10.5'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
            <TabbedStuffNode divid="q3" line="58" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q3', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ex_6_3">
    <caption/>
    <program xml:id="ex_6_3_editor" interactive="activecode" language="python">
        <input>
def getGrade(grade):
      #your code here


====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(getGrade(95),'A','Tested getGrade on input of 95')
        self.assertEqual(getGrade(85),'B','Tested getGrade on input of 85')
        self.assertEqual(getGrade(65),'D','Tested getGrade on input of 65')
        self.assertEqual(getGrade(79.99999),'C','Tested getGrade on input of 79.9999')
        self.assertEqual(getGrade(80),'B','Tested getGrade on input of 80')


myTests().main()
        </input>
    </program>
</listing>
                    <p>Write a function which is given an exam mark, and it returns a string &#8212; the grade for that mark &#8212; according to this
                        scheme:</p>
                    <tabular>
                        
                            
                            
                            
                                <row header="yes">
                                    <cell>
                                        Mark
                                    </cell>
                                    <cell>
                                        Grade
                                    </cell>
                                </row>
                            
                            
                                <row>
                                    <cell>
                                        &gt;= 90
                                    </cell>
                                    <cell>
                                        A
                                    </cell>
                                </row>
                                <row>
                                    <cell>
                                        [80-90)
                                    </cell>
                                    <cell>
                                        B
                                    </cell>
                                </row>
                                <row>
                                    <cell>
                                        [70-80)
                                    </cell>
                                    <cell>
                                        C
                                    </cell>
                                </row>
                                <row>
                                    <cell>
                                        [60-70)
                                    </cell>
                                    <cell>
                                        D
                                    </cell>
                                </row>
                                <row>
                                    <cell>
                                        &lt; 60
                                    </cell>
                                    <cell>
                                        F
                                    </cell>
                                </row>
                            
                        
                    </tabular>
                    <p>The square and round brackets denote closed and open intervals.
                        A closed interval includes the number, and open interval excludes it.   So 79.99999 gets grade C , but 80 gets grade B.</p>
                    <p>Test your function by printing the mark and the grade for a number of different marks.</p>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="q3_question">
    <caption/>
    <program xml:id="q3_question_editor" interactive="activecode" language="python">
        <input>
def grade(mark):
    if mark &gt;= 90:
        return "A"
    else:
        if mark &gt;= 80:
            return "B"
        else:
            if mark &gt;= 70:
                return "C"
            else:
                if mark &gt;= 60:
                    return "D"
                else:
                    return "F"

mark = 83
print( "Mark:", str(mark), "Grade:", grade(mark))
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="130" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_b9e6fd14629949e59da1a4ae827c0032', 'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-4" line="134" names="selection_ex_4" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_4', 'qnumber': '', 'question_label': '7.10.8'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">

<listing xml:id="ex_6_4">
    <caption/>
    <program xml:id="ex_6_4_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
            <p>Modify the turtle bar chart program from the previous chapter so that the bar for any value
                of 200 or more is filled with red, values between [100 and 200) are filled yellow,
                and bars representing values less than 100 are filled green.</p>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-5" line="144" names="selection_ex_5" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_5', 'qnumber': '', 'question_label': '7.10.10'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
            <TabbedStuffNode divid="q5" line="146" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q5', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ex_6_5">
    <caption/>
    <program xml:id="ex_6_5_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
                    <p>In the turtle bar chart program, what do you expect to happen if one or more
                        of the data values in the list is negative?   Go back and try it out.  Change the
                        program so that when it prints the text value for the negative bars, it puts
                        the text above the base of the bar (on the 0 axis).</p>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="answer_ex_6_5">
    <caption/>
    <program xml:id="answer_ex_6_5_editor" interactive="activecode" language="python">
        <input>
import turtle

def drawBar(t, height):
    """ Get turtle t to draw one bar, of height. """
    t.begin_fill()               # start filling this shape
    if height &lt; 0:
        t.write(str(height))
    t.left(90)
    t.forward(height)
    if height &gt;= 0:
        t.write(str(height))
    t.right(90)
    t.forward(40)
    t.right(90)
    t.forward(height)
    t.left(90)
    t.end_fill()                 # stop filling this shape



xs = [48, -50, 200, 240, 160, 260, 220]  # here is the data
maxheight = max(xs)
minheight = min(xs)
numbars = len(xs)
border = 10

tess = turtle.Turtle()           # create tess and set some attributes
tess.color("blue")
tess.fillcolor("red")
tess.pensize(3)

wn = turtle.Screen()             # Set up the window and its attributes
wn.bgcolor("lightgreen")
if minheight &gt; 0:
    lly = 0
else:
    lly = minheight - border

wn.setworldcoordinates(0-border, lly, 40*numbars+border, maxheight+border)


for a in xs:
    drawBar(tess, a)

wn.exitonclick()
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="214" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_0118bd02de23462bafdb51beb4c85e44', 'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-6" line="218" names="selection_ex_6" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_6', 'qnumber': '', 'question_label': '7.10.13'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">

<listing xml:id="ex_6_6">
    <caption/>
    <program xml:id="ex_6_6_editor" interactive="activecode" language="python">
        <input>

def findHypot(a,b):
    # your code here

====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(findHypot(12.0,5.0),13.0,"Tested findHypot on inputs of 12.0 and 5.0")
        self.assertEqual(findHypot(14.0,48.0),50.0,"Tested findHypot on inputs of 14.0 and 48.0")
        self.assertEqual(findHypot(21.0,72.0),75.0,"Tested findHypot on inputs of 21.0 and 72.0")
        self.assertAlmostEqual(findHypot(1,1.73205),1.999999,2,"Tested findHypot on inputs of 1 and 1.73205")

myTests().main()
        </input>
    </program>
</listing>
            <p>Write a function <c>findHypot</c>.  The function will be given the length of two sides of a right-angled triangle and it should return
                the length of the hypotenuse.  (Hint:  <c>x ** 0.5</c> will return the square root, or use <c>sqrt</c> from the math module)</p>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-7" line="245" names="selection_ex_7" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_7', 'qnumber': '', 'question_label': '7.10.15'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
            <TabbedStuffNode divid="q7" line="247" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q7', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ex_6_7">
    <caption/>
    <program xml:id="ex_6_7_editor" interactive="activecode" language="python">
        <input>

def is_even(n):
    # your code here

====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
     def testOne(self):
         self.assertEqual(is_even(10),True,"Tested is_even on input of 10")
         self.assertEqual(is_even(5),False,"Tested is_even on input of 5")
         self.assertEqual(is_even(1),False,"Tested is_even on input of 1")
         self.assertEqual(is_even(0),True,"Tested is_even on input of 0")

myTests().main()
        </input>
    </program>
</listing>
                    <p>Write a function called <c>is_even(n)</c> that takes an integer as an argument
                        and returns <c>True</c> if the argument is an <strong>even number</strong> and <c>False</c> if
                        it is <strong>odd</strong>.</p>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="q7_answer">
    <caption/>
    <program xml:id="q7_answer_editor" interactive="activecode" language="python">
        <input>
from test import testEqual

def is_even(n):
    if n % 2 == 0:
        return True
    else:
        return False

testEqual(is_even(10), True)
testEqual(is_even(5), False)
testEqual(is_even(1), False)
testEqual(is_even(0), True)
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="297" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_7ae92646976d4953ac8a163f338b4358', 'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-8" line="302" names="selection_ex_8" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_8', 'qnumber': '', 'question_label': '7.10.18'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">

<listing xml:id="ex_6_8">
    <caption/>
    <program xml:id="ex_6_8_editor" interactive="activecode" language="python">
        <input>

def is_odd(n):
    # your code here


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
     def testOne(self):
         self.assertEqual(is_odd(10),False,"Tested is_odd on input of 10")
         self.assertEqual(is_odd(5),True,"Tested is_odd on input of 5")
         self.assertEqual(is_odd(1),True,"Tested is_odd on input of 1")
         self.assertEqual(is_odd(0),False,"Tested is_odd on input of 0")

myTests().main()
        </input>
    </program>
</listing>
            <p>Now write the function <c>is_odd(n)</c> that returns <c>True</c> when <c>n</c> is odd
                and <c>False</c> otherwise.</p>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-9" line="329" names="selection_ex_9" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_9', 'qnumber': '', 'question_label': '7.10.20'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
            <TabbedStuffNode divid="q9" line="331" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q9', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ex_6_9">
    <caption/>
    <program xml:id="ex_6_9_editor" interactive="activecode" language="python">
        <input>

def is_odd(n):
    # your code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
     def testOne(self):
         self.assertEqual(is_odd(10),False,"Tested is_odd on input of 10")
         self.assertEqual(is_odd(5),True,"Tested is_odd on input of 5")
         self.assertEqual(is_odd(1),True,"Tested is_odd on input of 1")
         self.assertEqual(is_odd(0),False,"Tested is_odd on input of 0")

myTests().main()
        </input>
    </program>
</listing>
                    <p>Modify <c>is_odd</c> so that it uses a call to <c>is_even</c> to determine if its
                        argument is an odd integer.</p>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="q9_answer">
    <caption/>
    <program xml:id="q9_answer_editor" interactive="activecode" language="python">
        <input>
from test import testEqual

def is_even(n):
    if n % 2 == 0:
        return True
    else:
        return False

def is_odd(n):
    if is_even(n):
        return False
    else:
        return True

testEqual(is_odd(10), False)
testEqual(is_odd(5), True)
testEqual(is_odd(1), True)
testEqual(is_odd(0), False)
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="386" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_9125792d0c264b65b4d9d72d25485ceb', 'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-10" line="391" names="selection_ex_10" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_10', 'qnumber': '', 'question_label': '7.10.23'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">

<listing xml:id="ex_6_10">
    <caption/>
    <program xml:id="ex_6_10_editor" interactive="activecode" language="python">
        <input>
def is_rightangled(a, b, c):
    # your code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(is_rightangled(1.5,2.0,2.5),True,"Tested is_rightangled on inputs of 1.5, 2.0 and 2.5")
        self.assertEqual(is_rightangled(4.0,8.0,16.0),False,"Tested is_rightangled on inputs of 4.0, 8.0 and 16.0")
        self.assertEqual(is_rightangled(4.1,8.2,9.1678787077),True,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.1678787077")
        self.assertEqual(is_rightangled(4.1,8.2,9.16787),True,"Tested is_rightangled on inputs of 4.1, 8.2, and 9.16787")
        self.assertEqual(is_rightangled(4.1,8.2,9.168),False,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.168")
        self.assertEqual(is_rightangled(0.5,0.4,0.64031),True,"Tested is_rightangled on inputs of 0.5, 0.4 and 0.64031")

myTests().main()
        </input>
    </program>
</listing>
            <p>Write a function <c>is_rightangled</c> which, given the length of three sides of a triangle,
                will determine whether the triangle is right-angled.  Assume that the third argument to the
                function is always the longest side.  It will return <c>True</c> if the triangle
                is right-angled, or <c>False</c> otherwise.</p>
            <p>Hint: floating point arithmetic is not always exactly accurate,
                so it is not safe to test floating point numbers for equality.
                If a good programmer wants to know whether
                <c>x</c> is equal or close enough to <c>y</c>, they would probably code it up as</p>
            <program language="python"><input>
if  abs(x - y) &lt; 0.001:      # if x is approximately equal to y
    ...
</input></program>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-11" line="431" names="selection_ex_11" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_11', 'qnumber': '', 'question_label': '7.10.25'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
            <TabbedStuffNode divid="q11" line="433" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q11', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ex_6_11">
    <caption/>
    <program xml:id="ex_6_11_editor" interactive="activecode" language="python">
        <input>

def is_rightangled(a, b, c):
    # your code here


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(is_rightangled(1.5,2.5,2.0),True,"Tested is_rightangled on inputs of 1.5, 2.5 and 2.0")
        self.assertEqual(is_rightangled(16.0,4.0,8.0),False,"Tested is_rightangled on inputs of 16.0, 4.0 and 8.0")
        self.assertEqual(is_rightangled(4.1,8.2,9.1678787077),True,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.1678787077")
        self.assertEqual(is_rightangled(4.1,9.16787,8.2),True,"Tested is_rightangled on inputs of 4.1, 9.16787 and 8.2")
        self.assertEqual(is_rightangled(4.1,8.2,9.168),False,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.168")
        self.assertEqual(is_rightangled(0.5,0.64031,0.4),True,"Tested is_rightangled on inputs of 0.5, 0.64031 and 0.4")

myTests().main()
        </input>
    </program>
</listing>
                    <p>Extend the above program so that the sides can be given to the function in any order.</p>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="q11_answer">
    <caption/>
    <program xml:id="q11_answer_editor" interactive="activecode" language="python">
        <input>
from test import testEqual

def is_rightangled(a, b, c):
    is_rightangled = False

    if a &gt; b and a &gt; c:
        is_rightangled = abs(b**2 + c**2 - a**2) &lt; 0.001
    elif b &gt; a and b &gt; c:
        is_rightangled = abs(a**2 + c**2 - b**2) &lt; 0.001
    else:
        is_rightangled = abs(a**2 + b**2 - c**2) &lt; 0.001
    return is_rightangled

testEqual(is_rightangled(1.5, 2.0, 2.5), True)
testEqual(is_rightangled(4.0, 8.0, 16.0), False)
testEqual(is_rightangled(4.1, 8.2, 9.1678787077), True)
testEqual(is_rightangled(4.1, 8.2, 9.16787), True)
testEqual(is_rightangled(4.1, 8.2, 9.168), False)
testEqual(is_rightangled(0.5, 0.4, 0.64031), True)
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="490" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_b25992fa70fc4e7581d84315df38d796', 'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-12" line="495" names="selection_ex_12" runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_12', 'qnumber': '', 'question_label': '7.10.28'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">

<listing xml:id="ex_6_12">
    <caption/>
    <program xml:id="ex_6_12_editor" interactive="activecode" language="python">
        <input>
def isLeap(year):
    # your code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(isLeap(1944),True,"Tested isLeap on an input of 1944")
        self.assertEqual(isLeap(2011),False,"Tested isLeap on an input of 2011")
        self.assertEqual(isLeap(1986),False,"Tested isLeap on an input of 1986")
        self.assertEqual(isLeap(1800),False,"Tested isLeap on an input of 1800")
        self.assertEqual(isLeap(1900),False,"Tested isLeap on an input of 1900")
        self.assertEqual(isLeap(2000),True,"Tested isLeap on an input of 2000")
        self.assertEqual(isLeap(2056),True,"Tested isLeap on an input of 2056")

myTests().main()
        </input>
    </program>
</listing>
            <p>3 criteria must be taken into account to identify leap years:</p>
            <p>The year is evenly divisible by 4;</p>
            <p>If the year can be evenly divided by 100, it is NOT a leap year, unless;</p>
            <p>The year is also evenly divisible by 400. Then it is a leap year.</p>
            <p>Write a function that takes a year as a parameter and returns <c>True</c> if the year is a leap year, <c>False</c> otherwise.</p>
        </QuestionNode>
        <QuestionNode xml:id="selection-ex-13" line="530" names="selection_ex_13#." runestone_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'selection_ex_13#.', 'qnumber': '', 'question_label': '7.10.30'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
            <TabbedStuffNode divid="q13" line="532" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q13', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ex_6_13">
    <caption/>
    <program xml:id="ex_6_13_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
                    <p>Implement the calculator for the date of Easter.</p>
                    <p>The following algorithm computes the date for Easter Sunday for any year between 1900 to 2099.</p>
                    <p>Ask the user to enter a year.
                        Compute the following:</p>
                    <block_quote>
                        <p><ol label="1">
                            <li>
                                <p>a = year % 19</p>
                            </li>
                            <li>
                                <p>b = year % 4</p>
                            </li>
                            <li>
                                <p>c = year % 7</p>
                            </li>
                            <li>
                                <p>d = (19 * a + 24) % 30</p>
                            </li>
                            <li>
                                <p>e = (2 * b + 4 * c + 6 * d + 5) % 7</p>
                            </li>
                            <li>
                                <p>dateofeaster = 22 + d + e</p>
                            </li>
                        </ol></p>
                    </block_quote>
                    <p>Special note: The algorithm can give a date in April.  Also, if the year is one of four special
                        years (1954, 1981, 2049, or 2076) then subtract 7 from the date.</p>
                    <p>Your program should print an error message if the user provides a date that is out of range.</p>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="answer_ex_6_13">
    <caption/>
    <program xml:id="answer_ex_6_13_editor" interactive="activecode" language="python">
        <input>
year = int(input("Please enter a year"))
if year &gt;= 1900 and year &lt;= 2099:
    a = year % 19
    b = year % 4
    c = year % 7
    d = (19*a + 24) % 30
    e = (2*b + 4*c + 6*d + 5) % 7
    dateofeaster = 22 + d + e

    if year == 1954 or year == 2981 or year == 2049 or year == 2076:
        dateofeaster = dateofeaster - 7

    if dateofeaster &gt; 31:
        print("April", dateofeaster - 31)
    else:
        print("March", dateofeaster)
else:
    print("ERROR...year out of range")
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="586" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_2dfd6acf1ca849c2853dad606d1ba255', 'subchapter': 'Exercises', 'chapter': 'Selection', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Selection/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
    </section>

