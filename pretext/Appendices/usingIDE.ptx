<section xml:id="using-python-in-an-ide">
        <title>Using Python in an IDE</title>
        <subsection xml:id="finding-your-ide">
            <title>Finding Your IDE</title>
            <p>There are many different ways to us Python and other languages on a computer.
                For this example, we will be using an IDE called PyCharm, but there are many
                other options. A few of the IDEs you can use are listed below. IDE stands for
                &#8220;Integrated Development Environment.&#8221; Most good IDEs will consist of a
                <alert>source code editor</alert> that will let you write and manipulate the code, a
                <alert>debugger</alert> to help the user identify and solve issues within the code, and
                a <alert>compiler</alert> that translates your low-level code to high-level code or even
                binary to optimize the performance of your code.</p>
            <p><ul>
                <li>
                    <dl>
                        <li>
                            <title><url href="https://www.jetbrains.com/edu-products/download/#section=pycharm-edu" visual="https://www.jetbrains.com/edu-products/download/#section=pycharm-edu">https://www.jetbrains.com/edu-products/download/#section=pycharm-edu</url> (This is</title>
                            
                                <p>the IDE that will be shown here for the example, but we encourage you to try
                                    different ones and find the one that suits you.)</p>
                            
                        </li>
                    </dl>
                </li>
                <li>
                    <dl>
                        <li>
                            <title><url href="https://www.eclipse.org/" visual="https://www.eclipse.org/">https://www.eclipse.org/</url>; <url href="http://pydev.org/" visual="http://pydev.org/">http://pydev.org/</url> (Eclipse in an IDE for multiple</title>
                            
                                <p>different platforms/languages and pydev is a plug-in to use Python on Eclipse.)</p>
                            
                        </li>
                    </dl>
                </li>
                <li>
                    <dl>
                        <li>
                            <title><url href="https://visualstudio.microsoft.com/vs/community/" visual="https://visualstudio.microsoft.com/vs/community/">https://visualstudio.microsoft.com/vs/community/</url> (Visual Studio Community is</title>
                            
                                <p>a very flexible and modular IDE with great debugging tools.)</p>
                            
                        </li>
                    </dl>
                </li>
            </ul></p>
            <p>If you would like to browse through even more options, there are many others you
                can choose from!</p>
        </subsection>
        <subsection xml:id="downloading-your-ide">
            <title>Downloading Your IDE</title>
            <p>Each download may look different, but here is the general install proccess for
                PyCharm:</p>
            <figure align="center" xml:id="id1">
                <image source="Appendices/Figures/setup_page_01.JPG" alt="This is a screenshot of the opening page to the PyCharm IDE Setup manager."/>
                <caption>Figure 1</caption>
            </figure>
            <p>Save your install in a path that best works for you. Here we will save it in the
                default path.</p>
            <figure align="center" xml:id="id2">
                <image source="Appendices/Figures/setup_page_02.JPG" alt="This is a screenshot of how to choose the destination folder for the PyCharm IDE Setup manager."/>
                <caption>Figure 2</caption>
            </figure>
            <p>Select the installments that word best for your computer. Here, the selection for
                <alert>Add launchers dir to the PATH</alert> helps the computer to recognized automatically which
                folder should be opened in PyCharm.</p>
            <figure align="center" xml:id="id3">
                <image source="Appendices/Figures/setup_page_03.JPG" alt="This is a screenshot of the different installation options to choose from inside the Setup Manager."/>
                <caption>Figure 3</caption>
            </figure>
            <p>Only import settings settings to your IDE if you have set them up previously. For new
                installs, not importing settings is most likely best.</p>
            <figure align="center" xml:id="id4">
                <image source="Appendices/Figures/IDE_setup_05.JPG" alt="This is a screenshot of the Import PyCharm Settings page for the PyCharm Setup Manager."/>
                <caption>Figure 4</caption>
            </figure>
            <p>Once you have everything up and running, your home screen should looks something similar
                to this!</p>
            <figure align="center" xml:id="id5">
                <image source="Appendices/Figures/IDE_setup_06.JPG" alt="This is a screenshot of the home page for the Pycharm IDE."/>
                <caption>Figure 5</caption>
            </figure>
            <p>The last thing you need to do is to configure your interpreter that will be used in your
                IDE. While some downloads will automatically configure this for you, PyCharm needs the
                interpreter to be configured after opening your first repo. If you have a repo you would
                like to clone, then press on <alert>New Project</alert> and then navigate to the options for
                <alert>Base Interpreter</alert> and select the file path that your saved your Interpreter in with your
                download. Here, clicking <alert>Make available to all projects</alert> will set the base options for all
                new projects to use this Interpreter.</p>
            <figure align="center" xml:id="id6">
                <image source="Appendices/Figures/IDE_setup_08.JPG" alt="This is a screenshot of page seen after clicking &quot;New Project&quot; on the homepage in the Pycharm IDE."/>
                <caption>Figure 6</caption>
            </figure>
            <figure align="center" xml:id="id7">
                <image source="Appendices/Figures/IDE_setup_09.JPG" alt="This is a screenshot of the initial settings page when loading a new project in the Pycharm IDE."/>
                <caption>Figure 7</caption>
            </figure>
            <p>If you already have a repo on your local computer and would like to set up the interpreter from
                there, you can navigate to <alert>File</alert> -&gt; <alert>Settings</alert> -&gt; <alert>Project &lt;project name&gt;</alert> -&gt;
                <alert>Python Interpreter</alert></p>
            <figure align="center" xml:id="id8">
                <image source="Appendices/Figures/using_IDE_15.JPG" alt="This is a screenshot of the setting page while already inside a project for the Pycharm IDE."/>
                <caption>Figure 8</caption>
            </figure>
        </subsection>
        <subsection xml:id="using-an-ide">
            <title>Using an IDE</title>
            <p>Now you are ready to code in an IDE, just make sure you find the ways that your IDE uses to
                save, add, pull, commit, and push your work. For instance, in Pycharm, you can right click on
                the code. From there, you can Run the code, Debug the code, use the Git option to add, commit,
                and push your work, and so much more Playing around with it and figuring out new things is the
                best part!</p>
            <figure align="center" xml:id="id9">
                <image source="Appendices/Figures/using_IDE_10.PNG" alt="This is a screenshot of the context menu inside the Pycharm IDE."/>
                <caption>Figure 9</caption>
            </figure>
        </subsection>
        <subsection xml:id="debugging-with-an-ide">
            <title>Debugging with an IDE</title>
            <p>Using an IDE with a debugger and knowing how to use it is a powerful tool. It
                makes usually debugging much easier to manage because it has tools to &#8220;step&#8221;
                through the code to run your code line by line. It&#8217;s very similar to running
                your code through Python Tutor, which is a free online tool that helps you
                understand what happens in every single line of code.</p>
            <p>Keep in mind that most IDEs will look a little different in tools, but they
                will have mostly similar tools, like the debugging button.</p>
            <p>In PyCharm, your debugging tool will look like this:</p>
            <figure align="center" xml:id="id10">
                <image source="Appendices/Figures/debug.PNG" alt="This is a screenshot of the debug button at the tope of the PyCharm IDE."/>
                <caption>Figure 10</caption>
            </figure>
            <p>For more information on PyCharm debugging, you can follow &#8216;this link
                &lt;<url href="https://www.jetbrains.com/help/pycharm/part-1-debugging-python-code.html#step" visual="https://www.jetbrains.com/help/pycharm/part-1-debugging-python-code.html#step">https://www.jetbrains.com/help/pycharm/part-1-debugging-python-code.html#step</url>&gt;__&#8217;.
                Your debugging button will give you options for more tools, like &#8220;step-through&#8221;,
                which allows you to go through the code line by line. This usually allows for
                easier error-finding.</p>
            <p>Breakpoints allow you to set a point where the code stops executing. Doing this
                helps section off the code to make sure it functions. Note that breakpoints can
                be added at any time of the debugging process.</p>
            <p>If errors display in the console, they will let you know which line is the source
                of your troubles, usually at the end of the errors list. Some code or descriptor is
                given to help you fix the issue, but sometimes they are cryptic.</p>
            <figure align="center" xml:id="id11">
                <image source="Appendices/Figures/script_vs_console.JPG" alt="This is a screenshot of the Console and scrip editor of the Pycharm IDE with a successful repo opened inside."/>
                <caption>Figure 11</caption>
            </figure>
            <p>Remember that when coding, the console is different from the script. The console
                can display results and you can type line-by-line code. It will remember while you&#8217;re
                in the IDE, but you can&#8217;t save it the way you can save scripts. Above you will see
                the difference between where the script and console is normally on an IDE. When you
                run a program, it will only compile everything on the script and run that, not what is
                on the console.</p>
            <p>Working directly in the interpreter is convenient for testing short bits of code
                because you get immediate feedback. Think of it as scratch paper used to help you
                work out problems. Anything longer than a few lines should be put into a script.</p>
        </subsection>
    </section>

