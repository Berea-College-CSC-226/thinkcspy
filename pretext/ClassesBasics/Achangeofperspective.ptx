<section xml:id="a-change-of-perspective">
        <title>A change of perspective</title>
        <p>Throughout the earlier chapters, we wrote functions and called them using a syntax such as <c>drawCircle(tess)</c>.  This suggests that the
            function is the active agent. It says something like, <em>&#8220;Hey, drawCircle!
                Here&#8217;s a turtle object for you to use to draw with.&#8221;</em></p>
        <p>In object-oriented programming, the objects are considered the active agents.
            For example, in our early introduction to turtles, we used
            an object-oriented style. We said <c>tess.forward(100)</c>, which
            asks the turtle to move itself forward by the given number of steps.
            An
            invocation like <c>tess.circle()</c> says <em>&#8220;Hey tess!
                Please use your circle method!&#8221;</em></p>
        <p>This change in perspective is sometimes considered to be a more &#8220;polite&#8221; way to write programming instructions.  However, it may not initially
            be obvious that it is useful. It turns out that often times shifting responsibility from
            the functions onto the objects makes it possible to write more versatile
            functions and makes it easier to maintain and reuse code.</p>
        <p>The most important advantage of the object-oriented style is that it
            fits our mental chunking and real-life experience more accurately.
            In real life our <c>cook</c> method is part of our microwave oven &#8212; we don&#8217;t
            have a <c>cook</c> function sitting in the corner of the kitchen, into which
            we pass the microwave!  Similarly, we use the cellphone&#8217;s own methods
            to send an sms, or to change its state to silent.  The functionality
            of real-world objects tends to be tightly bound up inside the objects
            themselves.  OOP allows us to accurately mirror this when we
            organize our programs.</p>
    </section>

