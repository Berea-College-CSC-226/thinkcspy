<exercises xml:id="classesbasics_exercises">
        <title>Exercises</title>
        
            <exercise xml:id="classes_q1"><statement>
                    <p>Add a <c>distanceFromPoint</c> method that works similar to <c>distanceFromOrigin</c> except that it
                        takes a <c>Point</c> as a parameter and
                        computes the distance between that point and self.</p>

    
    
    <program xml:id="classes_q1_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</statement><solution>
    
    <program xml:id="ch_cl_ex_1_answer_editor" language="python">
        <input>
import math

class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):
        """ Create a new point at the given coordinates. """
        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def distanceFromOrigin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5

    def distanceFromPoint(self, otherP):
        dx = (otherP.getX() - self.x)
        dy = (otherP.getY() - self.y)
        return math.sqrt(dy**2 + dx**2)

p = Point(3, 3)
q = Point(6, 7)
print(p.distanceFromPoint(q))
        </input>
    </program>



                </solution></exercise>
        
        

<exercise xml:id="ch_cl_02">
    <statement>
            <p>Add a method <c>reflect_x</c> to Point which returns a new Point, one which is the
                reflection of the point about the x-axis.  For example,
                <c>Point(3, 5).reflect_x()</c> is (3, -5)</p>

    </statement>
    <program xml:id="ch_cl_02_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</exercise>
        
        
            <exercise xml:id="classes_q3"><statement>
                    <p>Add a method <c>slope_from_origin</c> which returns the slope of the line joining the origin
                        to the point.   For example,</p>
                    <pre>&gt;&gt;&gt; Point(4, 10).slope_from_origin()
2.5</pre>
                    <p>What cases will cause your method to fail? Return None when it happens.</p>

    
    
    <program xml:id="classes_q3_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</statement><solution>
    
    <program xml:id="ch_cl_ex_3_answer_editor" language="python">
        <input>
class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):
        """ Create a new point at the given coordinates. """
        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def distanceFromOrigin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5

    def slope_from_origin(self):
        if self.x == 0:
           return None
        else:
           return self.y / self.x


p = Point(4, 10)
print(p.slope_from_origin())
        </input>
    </program>



                </solution></exercise>
        
        

<exercise xml:id="ch_cl_04">
    <statement>
            <p>The equation of a straight line is  &#8220;y = ax + b&#8221;, (or perhaps &#8220;y = mx + c&#8221;).
                The coefficients a and b completely describe the line.  Write a method in the
                Point class so that if a point instance is given another point, it will compute the equation
                of the straight line joining the two points.  It must return the two coefficients as a tuple
                of two values.  For example,</p>
            <pre>&gt;&gt;&gt; print(Point(4, 11).get_line_to(Point(6, 15)))
&gt;&gt;&gt; (2, 3)</pre>
            <p>This tells us that the equation of the line joining the two points is &#8220;y = 2x + 3&#8221;.
                When will your method fail?</p>

    </statement>
    <program xml:id="ch_cl_04_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</exercise>
        
        
            <exercise xml:id="classes_q5"><statement>
                    <p>Add a method called <c>move</c> that will take two parameters, call them <c>dx</c> and <c>dy</c>.  The method will
                        cause the point to move in the x and y direction the number of units given. (Hint: you will change the values of the
                        state of the point)</p>

    
    
    <program xml:id="classes_q5_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</statement><solution>
    
    <program xml:id="ch_cl_05_answer_editor" language="python">
        <input>
class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):
        """ Create a new point at the given coordinates. """
        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def distanceFromOrigin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5

    def move(self, dx, dy):
        self.x = self.x + dx
        self.y = self.y + dy

    def __str__(self):
        return str(self.x) + "," + str(self.y)


p = Point(7, 6)
print(p)
p.move(5, 10)
print(p)
        </input>
    </program>



                </solution></exercise>
        
        

<exercise xml:id="classes_q6">
    <statement>
            <p>Given three points that fall on the circumference of a circle, find the center and radius of the circle.</p>

    </statement>
    <program xml:id="classes_q6_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</exercise>
        
    </exercises>

