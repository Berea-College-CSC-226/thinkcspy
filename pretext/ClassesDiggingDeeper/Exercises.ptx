<section xml:id="exercises">
        <title>Exercises</title>
        <QuestionNode xml:id="cdd-ex-1" line="13" names="cdd_ex_1" runestone_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'cdd_ex_1', 'qnumber': '', 'question_label': '18.6.1'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">
            <TabbedStuffNode divid="q1" line="15" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q1', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="classes_deeper_q1">
    <caption/>
    <program xml:id="classes_deeper_q1_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
                    <p>We can represent a rectangle by knowing three things: the location of its lower left corner, its width, and its height.
                        Create a class definition for a Rectangle class using this idea.  To create a Rectangle object at location (4,5) with width 6
                        and height 5, we would do the following:</p>
                    <pre>r = Rectangle(Point(4, 5), 6, 5)</pre>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="ch_cl2_answer1">
    <caption/>
    <program xml:id="ch_cl2_answer1_editor" interactive="activecode" language="python">
        <input>
class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def __str__(self):
        return "x=" + str(self.x) + ", y=" + str(self.y)


class Rectangle:
    """Rectangle class using Point, width and height"""

    def __init__(self, initP, initW, initH):

        self.location = initP
        self.width = initW
        self.height = initH

loc = Point(4, 5)
r = Rectangle(loc, 6, 5)
print(r)
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="66" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_ch_cl2_q1', 'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="cdd-ex-2" line="73" names="cdd_ex_2" runestone_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'cdd_ex_2', 'qnumber': '', 'question_label': '18.6.4'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">

<listing xml:id="ch_cl2_q2">
    <caption/>
    <program xml:id="ch_cl2_q2_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
            <p>Add the following accessor methods to the Rectangle class: <c>getWidth</c>, <c>getHeight</c>, <c>__str__</c>.</p>
        </QuestionNode>
        <QuestionNode xml:id="cdd-ex-3" line="82" names="cdd_ex_3" runestone_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'cdd_ex_3', 'qnumber': '', 'question_label': '18.6.6'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">
            <TabbedStuffNode divid="q3" line="84" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q3', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ch_cl2_q3">
    <caption/>
    <program xml:id="ch_cl2_q3_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
                    <p>Add a method <c>area</c> to the Rectangle class that returns the area of any instance:</p>
                    <pre>r = Rectangle(Point(0, 0), 10, 5)
test(r.area(), 50)</pre>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="ch_cl2_q3answer">
    <caption/>
    <program xml:id="ch_cl2_q3answer_editor" interactive="activecode" language="python">
        <input>
class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def __str__(self):
        return "x=" + str(self.x) + ", y=" + str(self.y)


class Rectangle:
    """Rectangle class using Point, width and height"""

    def __init__(self, initP, initW, initH):

        self.location = initP
        self.width = initW
        self.height = initH

    def area(self):
        return self.width * self.height
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="134" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_d43c8f8afb2c4c808917bb7e948dbcbe', 'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="cdd-ex-4" line="139" names="cdd_ex_4" runestone_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'cdd_ex_4', 'qnumber': '', 'question_label': '18.6.9'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">

<listing xml:id="ch_cl2_q4">
    <caption/>
    <program xml:id="ch_cl2_q4_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
            <p>Write a <c>perimeter</c> method in the Rectangle class so that we can find
                the perimeter of any rectangle instance:</p>
            <pre>r = Rectangle(Point(0, 0), 10, 5)
test(r.perimeter(), 30)</pre>
        </QuestionNode>
        <QuestionNode xml:id="cdd-ex-5" line="151" names="cdd_ex_5" runestone_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'cdd_ex_5', 'qnumber': '', 'question_label': '18.6.11'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">
            <TabbedStuffNode divid="q5" line="153" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q5', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ch_cl2_q5">
    <caption/>
    <program xml:id="ch_cl2_q5_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
                    <p>Write a <c>transpose</c> method in the Rectangle class that swaps the width
                        and the height of any rectangle instance:</p>
                    <pre>r = Rectangle(Point(100, 50), 10, 5)
test(r.width, 10)
test(r.height, 5)
r.transpose()
test(r.width, 5)
test(r.height, 10)</pre>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="ch_cl2_q5answer">
    <caption/>
    <program xml:id="ch_cl2_q5answer_editor" interactive="activecode" language="python">
        <input>
class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def __str__(self):
        return "x=" + str(self.x) + ", y=" + str(self.y)


class Rectangle:
    """Rectangle class using Point, width and height"""

    def __init__(self, initP, initW, initH):

        self.location = initP
        self.width = initW
        self.height = initH

    def transpose(self):
        temp = self.width
        self.width = self.height
        self.height = temp
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="209" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_chcl_q5disc', 'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="cdd-ex-6" line="214" names="cdd_ex_6" runestone_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'cdd_ex_6', 'qnumber': '', 'question_label': '18.6.14'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">

<listing xml:id="ch_cl2_q6">
    <caption/>
    <program xml:id="ch_cl2_q6_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
            <p>Write a new method in the Rectangle class to test if a Point falls within
                the rectangle.  For this exercise, assume that a rectangle at (0,0) with
                width 10 and height 5 has <emphasis>open</emphasis> upper bounds on the width and height,
                i.e. it stretches in the x direction from [0 to 10), where 0 is included
                but 10 is excluded, and from [0 to 5) in the y direction.  So
                it does not contain the point (10, 2).  These tests should pass:</p>
            <pre>r = Rectangle(Point(0, 0), 10, 5)
test(r.contains(Point(0, 0)), True)
test(r.contains(Point(3, 3)), True)
test(r.contains(Point(3, 7)), False)
test(r.contains(Point(3, 5)), False)
test(r.contains(Point(3, 4.99999)), True)
test(r.contains(Point(-3, -3)), False)</pre>
        </QuestionNode>
        <QuestionNode xml:id="cdd-ex-7" line="235" names="cdd_ex_7" runestone_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'cdd_ex_7', 'qnumber': '', 'question_label': '18.6.16'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">
            <TabbedStuffNode divid="q7" line="237" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'q7', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<listing xml:id="ch_cl2_q7">
    <caption/>
    <program xml:id="ch_cl2_q7_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
                    <p>Write a new method called <c>diagonal</c> that will return the length of the diagonal that runs
                        from the lower left corner to the opposite corner.</p>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

<listing xml:id="ch_cl2_answer7">
    <caption/>
    <program xml:id="ch_cl2_answer7_editor" interactive="activecode" language="python">
        <input>
class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def __str__(self):
        return "x=" + str(self.x) + ", y=" + str(self.y)


class Rectangle:
    """Rectangle class using Point, width and height"""

    def __init__(self, initP, initW, initH):

        self.location = initP
        self.width = initW
        self.height = initH

    def diagonal(self):

        d = (self.width**2 + self.height**2) ** 0.5
        return d
        </input>
    </program>
</listing>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="285" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_5f1e3f17064f44088a896e9bc0e10b4d', 'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': ''}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode xml:id="cdd-ex-8" line="290" names="cdd_ex_8" runestone_options="{'subchapter': 'Exercises', 'chapter': 'ClassesDiggingDeeper', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'cdd_ex_8', 'qnumber': '', 'question_label': '18.6.19'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/ClassesDiggingDeeper/Exercises.rst">

<listing xml:id="ch_cl2_q8">
    <caption/>
    <program xml:id="ch_cl2_q8_editor" interactive="activecode" language="python">
        <input>

        </input>
    </program>
</listing>
            <p>In games, we often put a rectangular &#8220;bounding box&#8221; around our sprites in
                the game.  We can then do <emphasis>collision detection</emphasis> between, say, bombs and
                spaceships, by comparing whether their rectangles overlap anywhere.</p>
            <p>Write a function to determine whether two rectangles collide. <emphasis>Hint:
                    this might be quite a tough exercise!  Think carefully about all the
                    cases before you code.</emphasis></p>
        </QuestionNode>
    </section>

