<section xml:id="values-and-data-types">
        <title>Values and Data Types</title>
        <p>A <strong>value</strong> is one of the fundamental things &#8212; like a word or a number &#8212;
            that a program manipulates. The values we have seen so far are <c>5</c> (the
            result when we added <c>2 + 3</c>), and <c>"Hello, World!"</c>.  We often refer to these values as <strong>objects</strong> and we will use the words value and object interchangeably.</p>
        <note>
            <p>Actually, the 2 and the 3 that are part of the addition above are values(objects) as well.</p>
        </note>
        <p>These objects are classified into different <strong>classes</strong>, or <strong>data types</strong>: <c>4</c>
            is an <emphasis>integer</emphasis>, and <c>"Hello, World!"</c> is a <emphasis>string</emphasis>, so-called because it
            contains a string or sequence of letters. You (and the interpreter) can identify strings
            because they are enclosed in quotation marks.</p>
        <p>If you are not sure what class a value falls into, Python has a function called
            <strong>type</strong> which can tell you.</p>

<listing xml:id="ch02_1">
    <caption/>
    <program xml:id="ch02_1_editor" interactive="activecode" language="python">
        <input>
print(type("Hello, World!"))
print(type(17))
print("Hello, World")
        </input>
    </program>
</listing>
        <p>Not surprisingly, strings belong to the class <strong>str</strong> and integers belong to the
            class <strong>int</strong>.</p>
        <note>
            <p>When we show the value of a string using the <c>print</c> function, such as in the third example above, the quotes are not present in the output.  The
                value of the string is the sequence of characters inside the quotes.  The quotes are only necessary to help Python know what the value is.</p>
        </note>
        <p>You may have used function notation in a math class, like <c>y = f(x)</c>, likely only for functions that act on a single numeric value, and produce a single numeric value.  Python has no such restrictions:  Inputs and outputs may be of any type.</p>
        <p>In the Python shell, it is not necessary to use the <c>print</c> function to see the values shown above.  The shell evaluates the Python function and automatically prints the result.  For example, consider the shell session shown below.  When
            we ask the shell to evaluate <c>type("Hello, World!")</c>, it responds with the appropriate answer and then goes on to
            display the prompt for the next use.</p>
        <pre>Python 3.1.2 (r312:79360M, Mar 24 2010, 01:33:18)
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; type("Hello, World!")
&lt;class 'str'&gt;
&gt;&gt;&gt; type(17)
&lt;class 'int'&gt;
&gt;&gt;&gt; "Hello, World"
'Hello, World'
&gt;&gt;&gt;</pre>
        <p>Note that in the last example, we simply ask the shell to evaluate the string &#8220;Hello, World&#8221;.  The result is as you might expect, the string itself.</p>
        <p>Continuing with our discussion of data types, numbers with a decimal point belong to a class
            called <strong>float</strong>, because these numbers are represented in a format called
            <emphasis>floating-point</emphasis>.  At this stage, you can treat the words <emphasis>class</emphasis> and <emphasis>type</emphasis>
            interchangeably.  We&#8217;ll come back to a deeper understanding of what a class
            is in later chapters.</p>

<listing xml:id="ch02_2">
    <caption/>
    <program xml:id="ch02_2_editor" interactive="activecode" language="python">
        <input>
print(type(17))
print(type(3.2))
        </input>
    </program>
</listing>
        <p>What about values like <c>"17"</c> and <c>"3.2"</c>? They look like numbers, but they
            are in quotation marks like strings.</p>

<listing xml:id="ch02_3">
    <caption/>
    <program xml:id="ch02_3_editor" interactive="activecode" language="python">
        <input>
print(type("17"))
print(type("3.2"))
        </input>
    </program>
</listing>
        <p>They&#8217;re strings!</p>
        <p>Strings in Python can be enclosed in either single quotes (<c>'</c>) or double
            quotes (<c>"</c> - the double quote character), or three of the same separate quote characters (<c>'''</c> or <c>"""</c>).</p>

<listing xml:id="ch02_4">
    <caption/>
    <program xml:id="ch02_4_editor" interactive="activecode" language="python">
        <input>
print(type('This is a string.') )
print(type("And so is this.") )
print(type("""and this.""") )
print(type('''and even this...''') )
        </input>
    </program>
</listing>
        <p>Double quoted strings can contain single quotes inside them, as in <c>"Bruce's
beard"</c>, and single quoted strings can have double quotes inside them, as in
            <c>'The knights who say "Ni!"'</c>.
            Strings enclosed with three occurrences of either quote symbol are called
            triple quoted strings.  They can contain either single or double quotes:</p>

<listing xml:id="ch02_5">
    <caption/>
    <program xml:id="ch02_5_editor" interactive="activecode" language="python">
        <input>
print('''"Oh no", she exclaimed, "Ben's bike is broken!"''')
        </input>
    </program>
</listing>
        <p>Triple quoted strings can even span multiple lines:</p>

<listing xml:id="ch02_6">
    <caption/>
    <program xml:id="ch02_6_editor" interactive="activecode" language="python">
        <input>
print("""This message will span
several lines
of the text.""")
        </input>
    </program>
</listing>
        <p>Python doesn&#8217;t care whether you use single or double quotes or the
            three-of-a-kind quotes to surround your strings.  Once it has parsed the text of
            your program or command, the way it stores the value is identical in all cases,
            and the surrounding quotes are not part of the value.</p>

<listing xml:id="ch02_7">
    <caption/>
    <program xml:id="ch02_7_editor" interactive="activecode" language="python">
        <input>
print('This is a string.')
print("""And so is this.""")
        </input>
    </program>
</listing>
        <p>So the Python language designers usually chose to surround their strings by
            single quotes.  What do you think would happen if the string already contained
            single quotes?</p>
        <p>When you type a large integer, you might be tempted to use commas between
            groups of three digits, as in <c>42,000</c>. This is not a legal integer in
            Python, but it does mean something else, which is legal:</p>

<listing xml:id="ch02_8">
    <caption/>
    <program xml:id="ch02_8_editor" interactive="activecode" language="python">
        <input>
print(42000)
print(42,000)
        </input>
    </program>
</listing>
        <p>Well, that&#8217;s not what we expected at all! Because of the comma, Python chose to
            treat this as a <emphasis>pair</emphasis> of values.     In fact, the print function can print any number of values as long
            as you separate them by commas.  Notice that the values are separated by spaces when they are displayed.</p>

<listing xml:id="ch02_8a">
    <caption/>
    <program xml:id="ch02_8a_editor" interactive="activecode" language="python">
        <input>
print(42, 17, 56, 34, 11, 4.35, 32)
print(3.4, "hello", 45)
        </input>
    </program>
</listing>
        <p>Remember not to put commas or spaces in your integers, no
            matter how big they are. Also revisit what we said in the previous chapter:
            formal languages are strict, the notation is concise, and even the smallest
            change might mean something quite different from what you intended.</p>
        <p><strong>Check your understanding</strong></p>

    <exercise xml:id="test_question2_1_1">
        <statement>

        <p>How can you determine the type of a variable?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Print out the value and determine the data type based on the value printed.</p>
                </statement>
                <feedback>
                    You may be able to determine the data type based on the printed value, but it may also be  deceptive, like when a string prints, there are no quotes around it.
                </feedback>
            </choice>

            <choice data-correct="yes">
                <statement>
                    <p>Use the type function.</p>
                </statement>
                <feedback>
                    The type function will tell you the class the value belongs to.
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Use it in a known equation and print the result.</p>
                </statement>
                <feedback>
                    Only numeric values can be used in equations.
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Look at the declaration of the variable.</p>
                </statement>
                <feedback>
                    In Python variables are not declared.
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise xml:id="test_question2_1_2">
        <statement>

        <p>What is the data type of &#8216;this is what kind of data&#8217;?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Character</p>
                </statement>
                <feedback>
                    It is not a single character.
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Integer</p>
                </statement>
                <feedback>
                    The data is not numeric.
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Float</p>
                </statement>
                <feedback>
                    The value is not numeric with a decimal point.
                </feedback>
            </choice>

            <choice data-correct="yes">
                <statement>
                    <p>String</p>
                </statement>
                <feedback>
                    Strings can be enclosed in single quotes.
                </feedback>
            </choice>
</choices>

    </exercise>
        
        
    </section>

