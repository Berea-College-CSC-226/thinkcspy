<section xml:id="executing-python-in-this-book">
        <title>Executing Python in this Book</title>

    <video xml:id="codelensvid" youtube="LZ7H1X8ar9E" width="560"/>
            <p>This book provides two special ways to execute Python programs.  Both techniques are designed to assist you as you
            learn the Python programming language.  They will help you increase your understanding of how Python programs work.</p>
        <p>First, you can write, modify, and execute programs using a unique <strong>activecode</strong> interpreter that allows you to execute Python code right
            in the text itself (right from the web browser).  Although this is certainly not the way real programs are written, it provides an excellent
            environment for learning a programming language like Python since you can experiment with the language as you are reading.</p>

<listing xml:id="ch01_1">
    <caption/>
    <program xml:id="ch01_1_editor" interactive="activecode" language="python">
        <input>
print("My first program adds two numbers, 2 and 3:")
print(2 + 3)
        </input>
    </program>
</listing>
        <p>Take a look at the activecode interpreter in action.</p>
        <p>What you see depends on whether you are <emphasis>logged in</emphasis> or not!
            Code that you write and run is saved for all future sessions
            only if you are <emphasis>logged in</emphasis>!  If you are logged in, you should see a
            green <emphasis>Save &amp; Run</emphasis> button.  If you are not logged in you see only <emphasis>Run</emphasis>.
            In the next discussion we will refer to both variants as the <emphasis>Run</emphasis> button.</p>
        <p>If we use the Python code from the previous example and make it active,
            you will see that it can be executed directly by pressing the <emphasis>Run</emphasis> button.
            Try pressing the <emphasis>Run</emphasis> (or <emphasis>Save &amp; Run</emphasis>) button above.</p>
        <p>Now try modifying the activecode program shown above.
            First, modify the string in the first print statement
            by changing the word <emphasis>adds</emphasis> to the word <emphasis>multiplies</emphasis>.
            Now press <emphasis>Run</emphasis>. You can see that the result of the program has changed.
            However, it still prints &#8220;5&#8221; as the answer.
            Modify the second print statement by changing the addition symbol,
            the &#8220;+&#8221;, to the multiplication symbol, &#8220;*&#8221;.
            Press <emphasis>Run</emphasis> to see the new results.</p>
        <p>As the name suggests, <emphasis>Save &amp; Run</emphasis> also <emphasis>saves</emphasis> your latest version of the code,
            and you can recover it even in later sessions when <emphasis>logged in</emphasis>. If <emphasis>not</emphasis> logged in,
            <emphasis>Run</emphasis> saves versions <emphasis>only until your browser leaves the current web page</emphasis>,
            and then you lose all modifications.</p>
        <p>After you have run your code the first time,
            a <emphasis>Load History</emphasis> button that was beside the <emphasis>Run</emphasis> button turns into a slider.
            If you click on the slider location box, you can use your left and right arrow
            buttons to switch to other versions you ran.
            Alternately you can drag the box on the slider.
            Now move the slider to see a previously saved state. You can just run it
            by pressing <emphasis>Run</emphasis>, or edit and then save and run it as the latest version.</p>
        <p>In addition to activecode, you can also execute Python code with the assistance
            of a unique visualization tool.  This tool, known as <strong>codelens</strong>,
            allows you to control the step by step execution of a program.
            It also lets you see the values of
            all variables (introduced in <xref ref="../SimplePythonData/Variables#variables"/>) as they are created and modified.
            The following example shows codelens in action on the same program as we saw above.
            Note that in activecode, the source code executes
            from beginning to end and you can see the final result.
            In codelens you can see and control the step by step progress.
            Note that the red arrow always points to the next line of code that is going to be executed.
            The light green arrow points to the line that was just executed.</p>
<exercise runestone="firstexample"/>        <p>The examples in this book use a mixture of the standard Python  interpreter, source code, activecode, and codelens.  You
            will be able to tell which is which by looking for either the Python prompt in the case of a shell mode program, the <emphasis>run</emphasis> button for the activecode, or the <emphasis>forward/backward</emphasis> buttons for codelens.</p>
        <p><strong>Check your understanding</strong></p>

    <exercise xml:id="question1_3_1">
        <statement>

        <p>The activecode interpreter allows you to (select all that apply):</p>

        </statement>
<choices>

            <choice data-correct="yes">
                <statement>
                    <p>save programs and reload saved programs.</p>
                </statement>
                <feedback>
                    You can (and should) save the contents of the activecode window.
                </feedback>
            </choice>

            <choice data-correct="yes">
                <statement>
                    <p>type in Python source code.</p>
                </statement>
                <feedback>
                    You are not limited to running the examples that are already there.  Try   adding to them and creating your own.
                </feedback>
            </choice>

            <choice data-correct="yes">
                <statement>
                    <p>execute Python code right in the text itself within the web browser.</p>
                </statement>
                <feedback>
                    The activecode interpreter will allow you type Python code into the textbox and then you can see it execute as the interpreter interprets and executes the source code.
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>receive a yes/no answer about whether your code is correct or not.</p>
                </statement>
                <feedback>
                    Although you can (and should) verify that your code is correct by examining its output, activecode will not directly tell you whether you have correctly implemented your program.
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise xml:id="question1_3_2">
        <statement>

        <p>Codelens allows you to (select all that apply):</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>measure the speed of a program's execution.</p>
                </statement>
                <feedback>
                    In fact, codelens steps through each line one by one as you click, which is MUCH slower than the Python interpreter.
                </feedback>
            </choice>

            <choice data-correct="yes">
                <statement>
                    <p>control the step by step execution of a program.</p>
                </statement>
                <feedback>
                    By using codelens, you can control the execution of a program step by step.  You can even go backwards!
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>write and execute your own Python code.</p>
                </statement>
                <feedback>
                    Codelens works only for the pre-programmed examples.
                </feedback>
            </choice>

            <choice data-correct="yes">
                <statement>
                    <p>execute the Python code that is in codelens.</p>
                </statement>
                <feedback>
                    By stepping forward through the Python code in codelens, you are executing the Python program.
                </feedback>
            </choice>
</choices>

    </exercise>
        
        
    </section>

